=> The fmt package provides formatting and printing functions that can be useful when developing
=> fmt.Println is a Go function, found in the fmt package, that tells the computer to print some text to the screen
=> The fmt.Scanln method tells the computer to wait for input from the keyboard ending with a new line or (\n), character.
=> Arrays are defined by declaring the size of the array, then the data type with the values defined between curly brackets { }
=> A map is constructed by using the keyword map followed by the key data type in square brackets [ ], followed by the value data type and the key value pairs in curly braces.
 example map[key]value{}
=> fmt.Println() which will print objects to standard out (most likely your terminal).
=> fmt.Printf() which will allow you to format your printed output.
=> When we add `defer` before a function, that function is executed after the surrounding function completes
=> goroutine is a lightweight thread in GoLang. It can continue its work alongside the main goroutine and thus creating concurrent execution

Q. When to use Goroutines in GoLang?
=> When one task can be split into different segments to perform better.
=> When making multiple requests to different API endpoints.
=> Any work that can utilize multi-core CPU should be well optimized using goroutines.
=> Running background operations in a program might be a use case for a goroutine.